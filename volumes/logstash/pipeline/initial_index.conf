input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-j.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://mysql:3306/es_relations_example"
    jdbc_user => "test"
    jdbc_password => "test"
    clean_run => true
    record_last_run => false
    statement => "SELECT product.id as id, product.name, category.name as category_name, brand.name as brand_name, barcode FROM product LEFT JOIN category ON product.category_id = category.id LEFT JOIN brand ON product.brand_id = brand.id"
    type => "product"
  }
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-j.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:mysql://mysql:3306/es_relations_example"
    jdbc_user => "test"
    jdbc_password => "test"
    clean_run => true
    record_last_run => false
    statement => "SELECT id, product_id, name as tag_name FROM tag"
    type => "tag"
  }
}

filter {
  if [type] == "product" {
    mutate {
      add_field => {"join_field" => "product"}
      remove_field => ["@version"]
    }
  } else if [type] == "tag" {
    mutate {
      add_field => {
        "[join_field][name]" => "tag"
        "[join_field][parent]" => "%{product_id}"
      }
      remove_field => ["@version"]
    }
  }
}

output {
  if [type] == "product" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "products"
      action => "index"
      document_id => "%{id}"
      routing => "%{id}"
      manage_template => true
      template => "/usr/share/logstash/templates/products.json"
      template_name => "products"
      template_overwrite => true
    }
    stdout {}
  } else if [type] == "tag" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "products"
      action => "index"
      document_id => "%{id}"
      routing => "%{product_id}"
      manage_template => true
      template => "/usr/share/logstash/templates/products.json"
      template_name => "products"
      template_overwrite => true
    }
    stdout {}
  }
}